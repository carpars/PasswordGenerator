@model WPA_MVC.Models.Password
@{
    //string inputToUse = Model.InputToUse ? "1" : "0";
    ViewData["Title"] = "Generate Password";

}


<div class="h1">Generate a custom random password</div>
<h4>PENDIENTE:</h4>
<ol>

    <li>
        Terminar de implementar todos los settings
    </li>
    <li>
        Defaults (sobre todo settings) desde controller: Hide pass, Save Settings, Include numbers, lowercase and uppercase letters
    </li>
</ol>

@*<form method="post">*@
<div class="row">
    <div class="col-sm-3 col-md-2">
        <div class="form-group">
            <div class="input-group mb-1">
                <label class="lbl-for-control-form">
                    Length
                </label>
                <select id="passw-generator-app-length" class="form-control" asp-for="Length">
                    @{
                        int length = !String.IsNullOrWhiteSpace(Model.Length) ? Int32.Parse(Model.Length) : 0;
                        //int length = Model.Length;
                        int minLength = Model.MinLength;
                        int maxLength = Model.MaxLength;

                        for (int i = minLength; i <= maxLength; i++)
                        {
                            if (length == 0 && i == minLength)
                            {
                                <option class="container-1row-font-size-normal" value="@i" selected>@i</option>
                            }
                            else if (length != 0 && i == length)
                            {
                                <option class="container-1row-font-size-normal" value="@i" selected>@i</option>
                            }
                            else
                            {
                                <option class="container-1row-font-size-normal" value="@i">@i</option>
                            }
                        }
                    }
                </select>
            </div>
        </div>
    </div>
    <div class="col-sm-9 col-md-10">
        <div class="form-group">
            <label class="lbl-for-control-form">
                Pattern Password (if any)
            </label>
            <div class="input-group mb-3">
                <div class="input-group-prepend input-group-icon">
                    <span class="input-group-text" data-toggle="tooltip" title="Sets length and symbols of the new password">
                        <span uk-icon="icon: info" ratio="1"></span>
                    </span>
                </div>
                <input id="passw-generator-app-input-passw" type="text" class="form-control" asp-for="InputPassword" value="@Model.InputPassword" placeholder="Enter the pattern password" />
                @*<label for="passw-generator-app-email" class="glyphicon glyphicon-search" rel="tooltip" title="email"></label>*@
                <div class="input-group-append">
                    <button id="passw-generator-app-btn-submit" class="btn btn-primary">Submit</button>
                    <button id="passw-generator-app-btn-reset-inputs" class="btn btn-danger">Reset</button>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-sm-12">
        <div class="form-group">
            <div class="input-group mb-1">
                <label class="lbl-for-control-form">
                    Your Password
                </label>
                <div class="input-group mb-2">
                    <input id="passw-generator-app-output-passw" type="text" class="form-control" asp-for="OutputPassword" value="@Model.OutputPassword" />
                    <div class="input-group-append">
                        <button id="passw-generator-app-btn-copy" class="btn btn-primary">Copy</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row m-t-2rem">
    <div class="d-flex justify-content-between col-sm-12">
        <div>
            <label class="lbl-for-control-form m-b-1rem">
                Settings
            </label>
        </div>
        <div>
            <button id="passw-generator-app-btn-reset-settings" class="btn btn-danger">Reset</button>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-sm-12">
        <div class="form-group">
            <input id="passw-generator-app-save-preferences" type="checkbox" asp-for="Settings.SavePreferences" data-toggle="toggle" />
            <label name="handle-control-by-code" class="toggle-switch-label" for="passw-generator-app-save-preferences">
                Save My Preferences in the local machine ( the Length and the Settings below )
            </label>
        </div>
        <div class="form-group">
            <input id="passw-generator-app-hide-passw" type="checkbox" asp-for="Settings.HidePassword" data-toggle="toggle" />
            <label name="handle-control-by-code" class="toggle-switch-label" for="passw-generator-app-hide-passw">
                Hide password
            </label>
        </div>
        <div class="form-group">
            <input id="passw-generator-app-auto-copy-to-clipboard" type="checkbox" asp-for="Settings.AutoCopyToClipboard" data-toggle="toggle" />
            <label name="handle-control-by-code" class="toggle-switch-label" for="passw-generator-app-auto-copy-to-clipboard">
                Auto-Copy to Clipboard ( copy the password automatically )
            </label>
        </div>
        <div class="form-group">
            <input id="passw-generator-app-include-symbols" type="checkbox" asp-for="Settings.IncludeSymbols" data-toggle="toggle" />
            <label name="handle-control-by-code" class="toggle-switch-label" for="passw-generator-app-include-symbols">
                Include Symbols ( e.g. $%&! )
            </label>
        </div>
        <div class="form-group">
            <input id="passw-generator-app-include-numbers" type="checkbox" asp-for="Settings.IncludeNumbers" data-toggle="toggle" />
            <label name="handle-control-by-code" class="toggle-switch-label" for="passw-generator-app-include-numbers">
                Include Numbers ( e.g. 123456 )
            </label>
        </div>
        <div class="form-group">
            <input id="passw-generator-app-include-lowercase" type="checkbox" asp-for="Settings.IncludeLowercase" data-toggle="toggle" />
            <label name="handle-control-by-code" class="toggle-switch-label" for="passw-generator-app-include-lowercase">
                Include Lowercase Characters ( e.g. abcdefgh )
            </label>
        </div>
        <div class="form-group">
            <input id="passw-generator-app-include-uppercase" type="checkbox" asp-for="Settings.IncludeUppercase" data-toggle="toggle" />
            <label name="handle-control-by-code" class="toggle-switch-label" for="passw-generator-app-include-uppercase">
                Include Uppercase Characters ( e.g. ABCDEFGH )
            </label>
        </div>
        <div class="form-group">
            <input id="passw-generator-app-hexadecimal-digits" type="checkbox" asp-for="Settings.HexadecimalDigits" data-toggle="toggle" />
            <label name="handle-control-by-code" class="toggle-switch-label" for="passw-generator-app-hexadecimal-digits">
                Use hexadecimal digits
            </label>
        </div>
        <div class="form-group">
            <input id="passw-generator-app-exclude-similar" type="checkbox" asp-for="Settings.ExcludeSimilar" data-toggle="toggle" />
            <label name="handle-control-by-code" class="toggle-switch-label" for="passw-generator-app-exclude-similar">
                Exclude Similar Characters ( e.g. i, l, 1, L, o, 0, O )
            </label>
        </div>
        <div class="form-group">
            <input id="passw-generator-app-exclude-ambiguous" type="checkbox" asp-for="Settings.ExcludeAmbiguous" data-toggle="toggle" />
            <label name="handle-control-by-code" class="toggle-switch-label" for="passw-generator-app-exclude-ambiguous">
                Exclude Ambiguous Characters ( { } [ ] ( ) / \ ' " ` ~ , ; : . < > )
            </label>
        </div>
        <div class="form-group">
            <input id="passw-generator-app-generate-on-device" type="checkbox" asp-for="Settings.GenerateOnDevice" data-toggle="toggle" />
            <label name="handle-control-by-code" class="toggle-switch-label" for="passw-generator-app-generate-on-device">
                Generate On Your Device ( do NOT send across the Internet )
            </label>
        </div>
        <div class="form-group">
            <input id="passw-generator-app-auto-select" type="checkbox" asp-for="Settings.AutoSelect" data-toggle="toggle" />
            <label name="handle-control-by-code" class="toggle-switch-label" for="passw-generator-app-auto-select">
                Auto-Select ( select the password automatically )
            </label>
        </div>
        <div class="form-group">
            <input id="passw-generator-app-load-settings-anywhere" type="checkbox" asp-for="Settings.LoadSettingsAnywhere" data-toggle="toggle" />
            <label name="handle-control-by-code" class="toggle-switch-label" for="passw-generator-app-load-settings-anywhere">
                Load My Settings Anywhere - URL to load my settings on other computers quickly
            </label>
        </div>
    </div>
</div>
@*</form>*@


@section Scripts {
    <script>

        let passwordRequest = {};

         try
         {
             $(document).ready(function () {
                 if (localStorage.getItem("passw-generator-app-save-preferences")) {
                     LoadDataFromStorageToControls();
                 }
                 // If 'save preferences' for this user is false or null
                 else {       
                     // If the default 'save preferences' is true, all default preferences are stored
                     if ($("#passw-generator-app-save-preferences").is(":checked")) {
                         SaveDataFromControlsToStorage();  
                     }
                     // If the default preference is false, nothing is stored and the storage is cleared
                     else {
                         // TODO Check if this erases also other domains' storage
                         localStorage.clear();
                     }
                     
                 }

                 $("#passw-generator-app-btn-submit").on('click', SubmitPasswordRequestAjax);
                 $("#passw-generator-app-btn-copy").on('click', function (ev) {
                     CopyToClipboard($("#passw-generator-app-output-passw").val());
                 });
                 $("#passw-generator-app-btn-reset-inputs").on('click', ResetInputs);
                 $("#passw-generator-app-btn-reset-settings").on('click', ResetSettings);

                 $('[data-toggle="tooltip"]').tooltip();

                 $('input[data-toggle="toggle"]').bootstrapToggle();

                 // Handle change event on checkboxesselect
                 $("#passw-generator-app-length").on('change', function (event) {
                     if (localStorage.getItem("passw-generator-app-save-preferences")) {
                         SaveDataFromControlsToStorage($(this).find("option:selected"));
                     }
                 });

                 // Handle change events on checkboxes
                 let $checkboxesPreferences = $('input[data-toggle="toggle"]');
                 $checkboxesPreferences.each(function () {
                     $(this).on('change', function (event, state) {                         
                         let idSavePreferences = "passw-generator-app-save-preferences";             

                         if ($(this).attr("id") == idSavePreferences) {
                             if ($(this).is(":checked")) {
                                 // Save to storage
                                 if (!localStorage.getItem(idSavePreferences)) {
                                     // If there were no storage at all, Save all checkboxes to storagr
                                     SaveDataFromControlsToStorage();
                                 } else {
                                     // If there were already storage, Save just this checkbox to storagr
                                     SaveDataFromControlsToStorage($(this));
                                 }
                             }
                             else {
                                 // Remove from storage
                                 localStorage.clear();
                             }
                         }
                         else {
                             if (localStorage.getItem(idSavePreferences)) {
                                 SaveDataFromControlsToStorage($(this));
                             }
                         }                                               
                     });
                 });

                 // Bind the label 'click' to the checkbox state
                 // TODO: check why with these Bootstrap 5 switchers, <label>
                 //     doesn't handle its input with 'for' neither with 
                 //     class="toggle-switch-label": some JS jQuery incompatibility.
                 //     Needed to do it here
                 let $labelsPreferences = $("label[name='handle-control-by-code']");
                 $labelsPreferences.each(function () {
                     $(this).on('click', function (ev) {    
                         $("#" + $(this).attr("for")).bootstrapToggle("toggle");                                    
                     });
                 });
             });                                         

             function SaveDataFromControlsToStorage($element) {
                 // If no element is sent, all data is saved to storage
                 if (!$element) {
                     // Save the control data
                     localStorage.setItem("passw-generator-app-length", $("#passw-generator-app-length option:selected").val());

                     // Save the checkbox data
                     // IMPORTANT: we are catching a data-attribute, should use a 'name' attr.
                     let $checkboxesPreferences = $("input[data-toggle='toggle']");
                     $checkboxesPreferences.each(function () {
                         let idInput = $(this).attr("id");
                         if ("" + $(this).is(":checked") != "" + localStorage.getItem("" + idInput)) {
                             localStorage.setItem("" + idInput, "" + $(this).is(":checked"))
                         }
                     });
                 }
                 // If an element is sent, this element is saved to storage
                 else {
                     let key = "";
                     let value = "";
                     if ($element.attr("type") == "checkbox") {
                         key = $element.attr("id");
                         value = $element.is(":checked"); 
                     }
                     else {
                         key = $element.parent().attr("id");
                         value = $element.val();
                     }                                                                                                                            
                     localStorage.setItem(key, "" + value);
                 }
             }

             function ResetInputs() {
                 $("#passw-generator-app-length option:first-child").prop("selected", "selected");
             }

             function ResetSettings() {
                 let $checkboxesPreferences = $("input[data-toggle='toggle']");
                 $checkboxesPreferences.each(function () {
                     let idInput = $(this).attr("id");
                     if ($(this).is(":checked")) {
                         $(this).bootstrapToggle("toggle");
                         //$(this).prop("checked", "");
                     }
                 });
                 // TODO: see if this removes all local storage data or JUST of this domain
                 localStorage.clear();
             }

             function SubmitPasswordRequestAjax()
             {
                 LoadDataFromControlsToMemory();

                 let url = '@Url.Action("GetResult", "Home")';

                 $.ajax({
                     type: "POST",
                     url: url,
                     //contentType: 'json',
                     data: passwordRequest,
                     success: function (data) {
                         AjaxSuccess(data);
                     },
                     error: function (jqXHR, textStatus, errorThrown) {
                         AjaxError(jqXHR, textStatus, errorThrown);
                     }
                 });
             }

             function LoadDataFromStorageToControls() {
                 // Load the control data
                 if (localStorage.getItem("passw-generator-app-length")) {
                     $("#passw-generator-app-length option[value='" + localStorage.getItem("passw-generator-app-length") + "']").prop("selected", "selected");
                 }

                 // Load the checkbox data
                 // IMPORTANT: we are catching a data-attribute, should use a 'name' attr.
                 let $checkboxesPreferences = $("input[data-toggle='toggle']");
                 $checkboxesPreferences.each(function () {
                     let idInput = $(this).attr("id");
                     if (localStorage.getItem("" + idInput)  != 'undefined') {
                         if ("" + $(this).is(":checked") + "" != localStorage.getItem("" + idInput)) {
                             $(this).bootstrapToggle("toggle");
                         }
                     }
                 });
             }

             function LoadDataFromControlsToMemory() {
                 passwordRequest = {
                     inputPassword: $("#passw-generator-app-input-passw").val(),
                     length: $("#passw-generator-app-length").val(),
                     settings:
                     {
                         savePreferences: $("#passw-generator-app-save-preferences").is(":checked"),
                         hidePassword: $("#passw-generator-app-hide-passw").is(":checked"),
                         includeSymbols: $("#passw-generator-app-include-symbols").is(":checked"),
                         includeNumbers: $("#passw-generator-app-include-numbers").is(":checked"),
                         includeLowercase: $("#passw-generator-app-include-lowercase").is(":checked"),
                         includeUppercase: $("#passw-generator-app-include-uppercase").is(":checked"),
                         hexadecimalDigits: $("#passw-generator-app-hexadecimal-digits").is(":checked"),
                         excludeSimilar: $("#passw-generator-app-exclude-similar").is(":checked"),
                         excludeAmbiguous: $("#passw-generator-app-exclude-ambiguous").is(":checked"),
                         generateOnDevice: $("#passw-generator-app-generate-on-device").is(":checked"),
                         autoSelect: $("#passw-generator-app-auto-select").is(":checked"),
                         autoCopyToClipboard: $("#passw-generator-app-auto-copy-to-clipboard").is(":checked"),
                         loadSettingsAnywhere: $("#passw-generator-app-load-settings-anywhere").is(":checked")
                     }
                 };
             }

             function AjaxSuccess(data) {

                 if ($("#passw-generator-app-hide-passw").is(":checked")) {
                     $("#passw-generator-app-output-passw").css("opacity", "0");
                 }
                 else {
                     $("#passw-generator-app-output-passw").css("opacity", "1");
                 }

                 // TODO: Remove for hidden password
                 if ($("#passw-generator-app-auto-select").is(":checked")) {
                     $("#passw-generator-app-output-passw").focus();
                 }

                 $("#passw-generator-app-output-passw").val(data.outputPassword);

                 if ($("#passw-generator-app-auto-copy-to-clipboard").is(":checked")) {
                     CopyToClipboard(data.outputPassword);
                 }

             }

             //function CopyToClipboard(textToCopy) {
             //    let $temp = $("<input>");
             //    $("body").append($temp);
             //    $temp.val(textToCopy).select();
             //    document.execCommand("copy");
             //    $temp.remove();
             //}
           
             function AjaxError(jqXHR, textStatus, errorThrown) {
                 alert("Ajax error..");
             }
         }
         catch (exception)
         {
             /* Handle any exceptions here.
             This example displays the exception to the user */
             alert(exception);
         }
    </script>
}
