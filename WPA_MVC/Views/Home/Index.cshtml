@model WPA_MVC.Models.Password
@{
    //string inputToUse = Model.InputToUse ? "1" : "0";
    ViewData["Title"] = "Generate Password";
}


<div class="h1">Generate a custom random password</div>
<h4>PENDIENTE:</h4>
<ol>W
    <li>
        Terminar de implementar todos los settings
    </li>
</ol>

@*<form method="post">*@
<div class="row">
    <div class="col-sm-3 col-md-2">
        <div class="form-group">
            <div class="input-group mb-1">
                <label class="lbl-for-control-form">
                    Length
                </label>
                <select id="length" class="form-control" asp-for="Length">
                    @{
                        int length = !String.IsNullOrWhiteSpace(Model.Length) ? Int32.Parse(Model.Length) : 0;
                        //int length = Model.Length;
                        int minLength = Model.MinLength;
                        int maxLength = Model.MaxLength;

                        for (int i = minLength; i <= maxLength; i++)
                        {
                            if (length == 0 && i == minLength)
                            {
                                <option class="container-1row-font-size-normal" value="@i" selected>@i</option>
                            }
                            else if (length != 0 && i == length)
                            {
                                <option class="container-1row-font-size-normal" value="@i" selected>@i</option>
                            }
                            else
                            {
                                <option class="container-1row-font-size-normal" value="@i">@i</option>
                            }
                        }
                    }
                </select>
            </div>
        </div>
    </div>
    <div class="col-sm-9 col-md-10">
        <div class="form-group">
            <label class="lbl-for-control-form">
                Pattern Password (if any)
            </label>
            <div class="input-group mb-3">
                <div class="input-group-prepend input-group-icon">
                    <span class="input-group-text" data-toggle="tooltip" title="Sets length and symbols of the new password">
                        <span uk-icon="icon: info" ratio="1"></span>
                    </span>
                </div>
                <input id="input-passw" type="text" class="form-control" asp-for="InputPassword" value="@Model.InputPassword" placeholder="Enter the pattern password" />
                @*<label for="email" class="glyphicon glyphicon-search" rel="tooltip" title="email"></label>*@
                <div class="input-group-append">
                    <button id="btn-submit" class="btn btn-primary">Submit</button>
                    <button id="btn-reset-inputs" class="btn btn-danger">Reset</button>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-sm-12">
        <div class="form-group">
            <div class="input-group mb-1">
                <label class="lbl-for-control-form">
                    Your Password
                </label>
                <div class="input-group mb-2">
                    <input id="output-passw" type="text" class="form-control" asp-for="OutputPassword" value="@Model.OutputPassword" />
                    <div class="input-group-append">
                        <button id="btn-copy" class="btn btn-primary">Copy</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row m-t-2rem">   
    <div class="d-flex justify-content-between col-sm-12">        
        <div>
            <label class="lbl-for-control-form m-b-1rem">
                Settings
            </label>
        </div>
        <div>
            <button id="btn-reset-settings" class="btn btn-danger">Reset</button>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-sm-12">
        <div class="form-group">
            <input id="save-preferences" type="checkbox" data-toggle="toggle" />
            <label name="handle-control-by-code" for="save-preferences">
                Save My Preferences in the local machine ( the Length and the Settings below )
            </label>
        </div>
        <div class="form-group">
            <input id="hide-passw" type="checkbox" data-toggle="toggle" />
            <label name="handle-control-by-code" for="hide-passw">
                Hide password
            </label>
        </div>
        <div class="form-group">
            <input id="auto-copy-to-clipboard" type="checkbox" data-toggle="toggle" />
            <label name="handle-control-by-code" for="auto-copy-to-clipboard">
                Auto-Copy to Clipboard ( copy the password automatically )
            </label>
        </div>
        <div class="form-group">
            <input id="include-symbols" type="checkbox" data-toggle="toggle" />
            <label name="handle-control-by-code" for="include-symbols">
                Include Symbols ( e.g. $%&! )
            </label>
        </div>
        <div class="form-group">
            <input id="include-numbers" type="checkbox" data-toggle="toggle" />
            <label name="handle-control-by-code" for="include-numbers">
                Include Numbers ( e.g. 123456 )
            </label>
        </div>
        <div class="form-group">
            <input id="include-lowercase" type="checkbox" data-toggle="toggle" />
            <label name="handle-control-by-code" for="include-lowercase">
                Include Lowercase Characters ( e.g. abcdefgh )
            </label>
        </div>
        <div class="form-group">
            <input id="include-uppercase" type="checkbox" data-toggle="toggle" />
            <label name="handle-control-by-code" for="include-uppercase">
                Include Uppercase Characters ( e.g. ABCDEFGH )
            </label>
        </div>
        <div class="form-group">
            <input id="exclude-similar" type="checkbox" data-toggle="toggle" />
            <label name="handle-control-by-code" for="exclude-similar">
                Exclude Similar Characters ( e.g. i, l, 1, L, o, 0, O )
            </label>
        </div>
        <div class="form-group">
            <input id="exclude-ambiguous" type="checkbox" data-toggle="toggle" />
            <label name="handle-control-by-code" for="exclude-ambiguous">
                Exclude Ambiguous Characters ( { } [ ] ( ) / \ ' " ` ~ , ; : . < > )
            </label>
        </div>
        <div class="form-group">
            <input id="generate-on-device" type="checkbox" data-toggle="toggle" />
            <label name="handle-control-by-code" for="generate-on-device">
                Generate On Your Device ( do NOT send across the Internet )
            </label>
        </div>
        <div class="form-group">
            <input id="auto-select" type="checkbox" data-toggle="toggle" />
            <label name="handle-control-by-code" for="auto-select">
                Auto-Select ( select the password automatically )
            </label>
        </div>
        <div class="form-group">
            <input id="load-settings-anywhere" type="checkbox" data-toggle="toggle" />
            <label name="handle-control-by-code" for="load-settings-anywhere">
                Load My Settings Anywhere - URL to load my settings on other computers quickly
            </label>
        </div>
    </div>
</div>
@*</form>*@


@section Scripts {
    <script>
        let passwordRequestOnLoad = null;

        let passwordRequest = {};

         try
         {
             $(document).ready(function () {
                 //localStorage.DataChanged = function () {
                 //    alert("changed");
                 //};

                 $("#btn-submit").on('click', SubmitPasswordRequestAjax);
                 $("#btn-copy").on('click', function (ev) {
                     CopyToClipboard($("#output-passw").val());
                 });
                 $("#btn-reset-inputs").on('click', ResetInputs);
                 $("#btn-reset-settings").on('click', ResetSettings);

                 $('[data-toggle="tooltip"]').tooltip();

                 // TODO: check why with these Bootstrap 5 switchers, <label>
                 //     doesn't handle its input with 'for'
                 let $labelsPreferences = $("label[name='handle-control-by-code']");
                 $labelsPreferences.each(function () {
                     $(this).on('click', function (ev) {
                         let idMatchingControl = $(this).attr("for");
                         let newState = $("#" + idMatchingControl).is(":checked") ? 1 : 0;
                         $("#" + idMatchingControl).prop("checked", newState);
                         $("#" + idMatchingControl).bootstrapToggle("toggle");                         
                     });
                 });

                 let savePreferences = localStorage.getItem("save-preferences");

                 if (savePreferences == "true") {
                     LoadData();
                 }

                 SaveData(function () {
                     passwordRequestOnLoad = passwordRequest;
                 });

                 window.addEventListener("beforeunload", function (ev) {
                     // event.preventDefault();
                     if (DataChanged) {
                         // PREGUNTAR SI QUIERE ABANDONAR??
                         //let message = 'Some changes are not saved yet!';
                         // event.preventDefault();
                         //event.returnValue = message;
                         //event.returnValue = true;
                         if ($("#save-preferences").is(":checked")) {
                             SaveData();
                         }
                         else {
                             localStorage.clear();
                         }
                     }
                 });
             });

             function ResetInputs() {
                 $("#length option:first-child").prop("selected", "selected");                 
             }

             function ResetSettings() {
                 let $checkboxesPreferences = $("input[data-toggle='toggle']");
                 $checkboxesPreferences.each(function () {
                     let idInput = $(this).attr("id");
                     if ($(this).is(":checked")) {
                         $(this).bootstrapToggle("toggle");
                         $(this).prop("checked", "");
                     }
                 });
             }

             function SubmitPasswordRequestAjax()
             {
                 if (DataChanged) {
                     // TODO: esto es asincrono: llama al ajax antes de SaveData. Poner llamada a ajax como 
                     //     callback de SaveData y después un return;, y añadir 'else' > misma llamada a ajax
                     SaveData();
                 }

                 let url = '@Url.Action("GetResult", "Home")';

                 $.ajax({
                     type: "POST",
                     url: url,
                     //contentType: 'json',
                     data: passwordRequest,
                     success: function (data) {
                         AjaxSuccess(data);
                     },
                     error: function (jqXHR, textStatus, errorThrown) {
                         AjaxError(jqXHR, textStatus, errorThrown);
                     }
                 });
             }

             function AjaxSuccess(data) {

                 if ($("#hide-passw").is(":checked")) {
                     $("#output-passw").css("opacity", "0");
                 }
                 else {
                     $("#output-passw").css("opacity", "1");
                 }

                 // TODO: Remove for hidden password
                 if ($("#auto-select").is(":checked")) {
                     $("#output-passw").focus();
                 }

                 $("#output-passw").val(data.outputPassword);

                 if ($("#auto-copy-to-clipboard").is(":checked")) {
                     CopyToClipboard(data.outputPassword);
                 }
                 
             }

             function CopyToClipboard(textToCopy) {
                 let $temp = $("<input>");
                 $("body").append($temp);
                 $temp.val(textToCopy).select();
                 document.execCommand("copy");
                 $temp.remove();
             }

             function LoadData(SaveData){
                 // Load the control data                 
                 $("#length option[value='" + localStorage.getItem("length") + "']").prop("selected", "selected");

                 // TODO: cargar del web storage recorriendo
                 //     autom. las props del objetoç
                 // IMPORTANT: we are catching a data-attribute, should use a 'name' attr.
                 let $checkboxesPreferences = $("input[data-toggle='toggle']");
                 $checkboxesPreferences.each(function () {                     
                     let idInput = $(this).attr("id");
                     if ("" + $(this).is(":checked") + "" != localStorage.getItem("" + idInput)) {
                         $(this).bootstrapToggle("toggle");
                     }
                 });

                 // Load the variable
                 passwordRequest = {
                     inputPassword: $("#input-passw").val(),
                     length: $("#length").val(),
                     settings:
                     {
                         savePreferences: $("#save-preferences").is(":checked"),
                         hidePassword: $("#hide-passw").is(":checked"),
                         includeSymbols: $("#include-symbols").is(":checked"),
                         includeNumbers: $("#include-numbers").is(":checked"),
                         includeLowercase: $("#include-lowercase").is(":checked"),
                         includeUppercase: $("#include-uppercase").is(":checked"),
                         excludeSimilar: $("#exclude-similar").is(":checked"),
                         excludeAmbiguous: $("#exclude-ambiguous").is(":checked"),
                         generateOnDevice: $("#generate-on-device").is(":checked"),
                         autoSelect: $("#auto-select").is(":checked"),
                         autoCopyToClipboard: $("#auto-copy-to-clipboard").is(":checked"),
                         loadSettingsAnywhere: $("#load-settings-anywhere").is(":checked")
                     }
                 };
             }

             function SaveData() {                                                     
                 
                 if ($("#save-preferences").is(":checked")) {                 
                     // Save the inputs
                     localStorage.setItem("length", $("#length option:selected").val());

                     // Save the preferences

                     // TODO: guardar en web storage recorriendo
                     //     autom. las props del objeto
                     // IMPORTANT: we are catching a data-attribute, should use a 'name' attr.
                     let $checkboxesPreferences = $("input[data-toggle='toggle']");
                     $checkboxesPreferences.each(function () {
                         let idInput = $(this).attr("id");
                         if ($(this).is(":checked") != localStorage.getItem("" + idInput)) {
                             localStorage.setItem("" + idInput, "" + $(this).is(":checked"));
                         }
                     });
                 }                 

                 // Save the variable
                 passwordRequest = {
                     inputPassword: $("#input-passw").val(),
                     length: $("#length").val(),
                     settings:
                     {
                         savePreferences: $("#save-preferences").is(":checked"),
                         hidePassword: $("#hide-passw").is(":checked"),
                         includeSymbols: $("#include-symbols").is(":checked"),
                         includeNumbers: $("#include-numbers").is(":checked"),
                         includeLowercase: $("#include-lowercase").is(":checked"),
                         includeUppercase: $("#include-uppercase").is(":checked"),
                         excludeSimilar: $("#exclude-similar").is(":checked"),
                         excludeAmbiguous: $("#exclude-ambiguous").is(":checked"),
                         generateOnDevice: $("#generate-on-device").is(":checked"),
                         autoSelect: $("#ato-select").is(":checked"),
                         autoCopyToClipboard: $("#auto-copy-to-clipboard").is(":checked"),
                         loadSettingsAnywhere: $("#load-settings-anywhere").is(":checked")
                     }
                 };
             }

             function DataChanged() {
                 debugger;
                 if (JSON.stringify(passwordRequest) != JSON.stringify(passwordRequestOnLoad)) {
                     return true;
                 } else {
                     return false;
                 }
             }

             function AjaxError(jqXHR, textStatus, errorThrown) {
                 alert("Ajax error..");
             }
         }
         catch (exception)
         {
             /* Handle any exceptions here.
             This example displays the exception to the user */
             alert(exception);
         }
    </script>
}
